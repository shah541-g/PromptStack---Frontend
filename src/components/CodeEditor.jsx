import React, { useState, useRef, useEffect } from 'react';
import { 
  Play, 
  Save, 
  Download, 
  Copy, 
  Maximize2, 
  Folder, 
  FolderOpen, 
  FileText, 
  ChevronRight, 
  ChevronDown,
  Plus,
  X,
  Settings
} from 'lucide-react';
import Editor from '@monaco-editor/react';

const CodeEditor = () => {
  const [files, setFiles] = useState({
    'src/App.jsx': {
      content: `import React, { useState } from 'react';
import './App.css';

const App = () => {
  const [count, setCount] = useState(0);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to PromptStack IDE</h1>
        <p>Count: {count}</p>
        <button 
          onClick={() => setCount(count + 1)}
          className="btn btn-primary"
        >
          Increment
        </button>
      </header>
    </div>
  );
};

export default App;`,
      language: 'javascript'
    },
    'src/components/Header.jsx': {
      content: `import React from 'react';

const Header = ({ title }) => {
  return (
    <header className="header">
      <h1>{title}</h1>
    </header>
  );
};

export default Header;`,
      language: 'javascript'
    },
    'src/styles/App.css': {
      content: `.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-primary:hover {
  background-color: #0056b3;
}`,
      language: 'css'
    },
    'src/utils/helpers.js': {
      content: `// Utility functions
export const formatDate = (date) => {
  return new Intl.DateTimeFormat('en-US').format(date);
};

export const debounce = (func, delay) => {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

export const capitalize = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};`,
      language: 'javascript'
    },
    'package.json': {
      content: `{
  "name": "promptstack-project",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}`,
      language: 'json'
    },
    'README.md': {
      content: `# PromptStack Project

This project was generated by PromptStack IDE.

## Available Scripts

In the project directory, you can run:

### \`npm start\`

Runs the app in development mode.
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

### \`npm run build\`

Builds the app for production to the \`build\` folder.

### \`npm test\`

Launches the test runner in the interactive watch mode.

## Learn More

You can learn more about React in the [React documentation](https://reactjs.org/).
`,
      language: 'markdown'
    }
  });

  const [activeFile, setActiveFile] = useState('src/App.jsx');
  const [openTabs, setOpenTabs] = useState(['src/App.jsx']);
  const [expandedFolders, setExpandedFolders] = useState(['src', 'src/components', 'src/styles', 'src/utils']);
  const [sidebarWidth, setSidebarWidth] = useState(250);
  const [theme, setTheme] = useState('vs-dark');
  const [language, setLanguage] = useState('javascript');
  const [isResizing, setIsResizing] = useState(false);
  
  const editorRef = useRef(null);
  const resizeRef = useRef(null);

  // File structure organized by folders
  const fileStructure = React.useMemo(() => {
    const structure = {};
    Object.keys(files).forEach(filePath => {
      const parts = filePath.split('/');
      let current = structure;
      
      for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (i === parts.length - 1) {
          // It's a file
          if (!current.files) current.files = {};
          current.files[part] = filePath;
        } else {
          // It's a folder
          if (!current.folders) current.folders = {};
          if (!current.folders[part]) current.folders[part] = {};
          current = current.folders[part];
        }
      }
    });
    return structure;
  }, [files]);

  const getFileIcon = (fileName) => {
    const ext = fileName.split('.').pop().toLowerCase();
    switch (ext) {
      case 'jsx':
      case 'js':
        return '⚛️';
      case 'css':
        return '🎨';
      case 'json':
        return '📋';
      case 'md':
        return '📝';
      default:
        return '📄';
    }
  };

  const getLanguageFromFile = (fileName) => {
    const ext = fileName.split('.').pop().toLowerCase();
    switch (ext) {
      case 'jsx':
      case 'js':
        return 'javascript';
      case 'css':
        return 'css';
      case 'json':
        return 'json';
      case 'md':
        return 'markdown';
      case 'html':
        return 'html';
      case 'py':
        return 'python';
      case 'ts':
      case 'tsx':
        return 'typescript';
      default:
        return 'javascript';
    }
  };

  const handleFileSelect = (filePath) => {
    setActiveFile(filePath);
    setLanguage(getLanguageFromFile(filePath));
    
    if (!openTabs.includes(filePath)) {
      setOpenTabs([...openTabs, filePath]);
    }
  };

  const handleCloseTab = (filePath) => {
    const newTabs = openTabs.filter(tab => tab !== filePath);
    setOpenTabs(newTabs);
    
    if (activeFile === filePath && newTabs.length > 0) {
      setActiveFile(newTabs[newTabs.length - 1]);
      setLanguage(getLanguageFromFile(newTabs[newTabs.length - 1]));
    }
  };

  const handleCodeChange = (value) => {
    setFiles(prev => ({
      ...prev,
      [activeFile]: {
        ...prev[activeFile],
        content: value
      }
    }));
  };

  const toggleFolder = (folderPath) => {
    setExpandedFolders(prev => 
      prev.includes(folderPath) 
        ? prev.filter(f => f !== folderPath)
        : [...prev, folderPath]
    );
  };

  const renderFileTree = (structure, basePath = '') => {
    return (
      <div className="select-none">
        {/* Render folders */}
        {structure.folders && Object.entries(structure.folders).map(([folderName, folderContent]) => {
          const folderPath = basePath ? `${basePath}/${folderName}` : folderName;
          const isExpanded = expandedFolders.includes(folderPath);
          
          return (
            <div key={folderPath}>
              <div
                className="flex items-center gap-1 py-1 px-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-sm"
                onClick={() => toggleFolder(folderPath)}
              >
                {isExpanded ? <ChevronDown size={14} /> : <ChevronRight size={14} />}
                {isExpanded ? <FolderOpen size={14} /> : <Folder size={14} />}
                <span>{folderName}</span>
              </div>
              {isExpanded && (
                <div className="ml-4">
                  {renderFileTree(folderContent, folderPath)}
                </div>
              )}
            </div>
          );
        })}
        
        {/* Render files */}
        {structure.files && Object.entries(structure.files).map(([fileName, filePath]) => (
          <div
            key={filePath}
            className={`flex items-center gap-2 py-1 px-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-sm ${
              activeFile === filePath ? 'bg-blue-100 dark:bg-blue-900' : ''
            }`}
            onClick={() => handleFileSelect(filePath)}
          >
            <span className="text-xs">{getFileIcon(fileName)}</span>
            <span>{fileName}</span>
          </div>
        ))}
      </div>
    );
  };

  const handleRunCode = () => {
    console.log('Running code...', files[activeFile]?.content);
    // Implement code execution logic
  };

  const handleSaveCode = () => {
    console.log('Saving code...', files[activeFile]?.content);
    // Implement save logic
  };

  const handleCopyCode = () => {
    navigator.clipboard.writeText(files[activeFile]?.content || '');
    console.log('Code copied to clipboard');
  };

  // Handle sidebar resize
  const handleMouseDown = (e) => {
    setIsResizing(true);
    e.preventDefault();
  };

  const handleMouseMove = (e) => {
    if (!isResizing) return;
    const newWidth = e.clientX;
    if (newWidth > 150 && newWidth < 400) {
      setSidebarWidth(newWidth);
    }
  };

  const handleMouseUp = () => {
    setIsResizing(false);
  };

  useEffect(() => {
    if (isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isResizing]);

  return (
    <div className="h-full bg-white dark:bg-gray-900 flex flex-col">
      {/* Toolbar */}
      <div className="flex items-center justify-between p-2 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
        <div className="flex items-center space-x-2">
          <button 
            onClick={handleRunCode}
            className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded text-sm flex items-center gap-1"
          >
            <Play size={14} />
            Run
          </button>
          <button 
            onClick={handleSaveCode}
            className="px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-sm flex items-center gap-1"
          >
            <Save size={14} />
            Save
          </button>
          <button 
            onClick={handleCopyCode}
            className="px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded text-sm flex items-center gap-1"
          >
            <Copy size={14} />
            Copy
          </button>
        </div>
        
        <div className="flex items-center space-x-2">
          <select 
            value={theme} 
            onChange={(e) => setTheme(e.target.value)}
            className="px-2 py-1 border border-gray-300 dark:border-gray-600 rounded text-sm bg-white dark:bg-gray-700"
          >
            <option value="vs-dark">Dark</option>
            <option value="light">Light</option>
            <option value="vs">VS Code</option>
          </select>
          <button className="p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded">
            <Settings size={16} />
          </button>
        </div>
      </div>

      <div className="flex-1 flex overflow-hidden">
        {/* File Explorer Sidebar */}
        <div 
          className="bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto"
          style={{ width: sidebarWidth }}
        >
          <div className="p-3 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-sm font-semibold text-gray-900 dark:text-white flex items-center gap-2">
              <Folder size={16} />
              Explorer
            </h3>
          </div>
          <div className="p-2">
            {renderFileTree(fileStructure)}
          </div>
        </div>

        {/* Resize Handle */}
        <div
          ref={resizeRef}
          className="w-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 cursor-col-resize"
          onMouseDown={handleMouseDown}
        />

        {/* Editor Area */}
        <div className="flex-1 flex flex-col">
          {/* Tabs */}
          <div className="flex items-center bg-gray-100 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 overflow-x-auto">
            {openTabs.map((filePath) => (
              <div
                key={filePath}
                className={`flex items-center gap-2 px-3 py-2 border-r border-gray-200 dark:border-gray-700 text-sm cursor-pointer ${
                  activeFile === filePath 
                    ? 'bg-white dark:bg-gray-900 text-gray-900 dark:text-white' 
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700'
                }`}
                onClick={() => handleFileSelect(filePath)}
              >
                <span className="text-xs">{getFileIcon(filePath.split('/').pop())}</span>
                <span>{filePath.split('/').pop()}</span>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleCloseTab(filePath);
                  }}
                  className="hover:bg-gray-300 dark:hover:bg-gray-600 rounded"
                >
                  <X size={14} />
                </button>
              </div>
            ))}
          </div>

          {/* Monaco Editor */}
          <div className="flex-1">
            {activeFile && files[activeFile] ? (
              <Editor
                height="100%"
                language={language}
                theme={theme}
                value={files[activeFile].content}
                onChange={handleCodeChange}
                options={{
                  fontSize: 14,
                  minimap: { enabled: false },
                  scrollBeyondLastLine: false,
                  automaticLayout: true,
                  tabSize: 2,
                  wordWrap: 'on',
                  lineNumbers: 'on',
                  folding: true,
                  bracketMatching: 'always',
                  autoIndent: 'full',
                  formatOnPaste: true,
                  formatOnType: true,
                }}
                onMount={(editor) => {
                  editorRef.current = editor;
                }}
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500">
                <div className="text-center">
                  <FileText size={48} className="mx-auto mb-4" />
                  <p>Select a file to start editing</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Status Bar */}
      <div className="bg-gray-100 dark:bg-gray-800 px-4 py-2 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-600 dark:text-gray-400">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <span>Line 1, Column 1</span>
            <span>UTF-8</span>
            <span className="capitalize">{language}</span>
          </div>
          <div className="flex items-center space-x-4">
            <span>Spaces: 2</span>
            <span className="flex items-center gap-1">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Ready
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeEditor;
